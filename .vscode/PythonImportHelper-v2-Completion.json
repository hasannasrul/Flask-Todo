[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    task = db.Column(db.String, nullable=False)\n    desc = db.Column(db.String, nullable=False)\n    created = db.Column(db.DateTime, default=datetime.datetime.today())\n    def __repr__(self) -> str:\n        return f'{self.task} - {self.task}'\ncontext = app.app_context()\nwith context:\n    db.create_all()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_read",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_read():\n    if request.method == 'POST':\n        if(request.form['task']==\"\" and request.form['desc']==\"\"):\n            return \"please enter task\"\n        else:\n            task = request.form['task']\n            desc = request.form['desc']\n            todo = Todo(task=task, desc=desc)\n            db.session.add(todo)\n            db.session.commit() ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "update_todo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def update_todo(sno):\n    if request.method == 'POST':\n        task = request.form['task']\n        desc = request.form['desc']\n        todo = Todo.query.filter_by(sno=sno).first()\n        todo.task = task\n        todo.desc  = desc\n        db.session.add(todo)\n        db.session.commit() \n        return redirect('/')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete_todo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_todo(sno):\n    todo = Todo.query.filter_by(sno=sno).first()\n    db.session.delete(todo)\n    db.session.commit()\n    return redirect('/')\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\",debug=True, port=7000)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///project.db\"\ndb = SQLAlchemy(app)\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    task = db.Column(db.String, nullable=False)\n    desc = db.Column(db.String, nullable=False)\n    created = db.Column(db.DateTime, default=datetime.datetime.today())\n    def __repr__(self) -> str:\n        return f'{self.task} - {self.task}'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///project.db\"\ndb = SQLAlchemy(app)\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    task = db.Column(db.String, nullable=False)\n    desc = db.Column(db.String, nullable=False)\n    created = db.Column(db.DateTime, default=datetime.datetime.today())\n    def __repr__(self) -> str:\n        return f'{self.task} - {self.task}'\ncontext = app.app_context()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    task = db.Column(db.String, nullable=False)\n    desc = db.Column(db.String, nullable=False)\n    created = db.Column(db.DateTime, default=datetime.datetime.today())\n    def __repr__(self) -> str:\n        return f'{self.task} - {self.task}'\ncontext = app.app_context()\nwith context:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "context = app.app_context()\nwith context:\n    db.create_all()\n@app.route(\"/\", methods=['GET', 'POST'])\ndef create_read():\n    if request.method == 'POST':\n        if(request.form['task']==\"\" and request.form['desc']==\"\"):\n            return \"please enter task\"\n        else:\n            task = request.form['task']",
        "detail": "app",
        "documentation": {}
    }
]